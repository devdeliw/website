<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on my undergrad work</title>
    <link>http://localhost:1313/categories/software/</link>
    <description>Recent content in Software on my undergrad work</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/software/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Memory</title>
      <link>http://localhost:1313/posts/memory/</link>
      <pubDate>Sat, 25 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/memory/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;http://localhost:1313/katex/katex.min.css&#34; /&gt;&lt;script defer src=&#34;http://localhost:1313/katex/katex.min.js&#34;&gt;&lt;/script&gt;&lt;script defer src=&#34;http://localhost:1313/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body, {&amp;#34;delimiters&amp;#34;:[{&amp;#34;left&amp;#34;:&amp;#34;$$&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;$$&amp;#34;,&amp;#34;display&amp;#34;:true},{&amp;#34;left&amp;#34;:&amp;#34;$&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;$&amp;#34;,&amp;#34;display&amp;#34;:false},{&amp;#34;left&amp;#34;:&amp;#34;\\(&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;\\)&amp;#34;,&amp;#34;display&amp;#34;:false},{&amp;#34;left&amp;#34;:&amp;#34;\\[&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;\\]&amp;#34;,&amp;#34;display&amp;#34;:true}]});&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;Before diving into how BLAS is written to be fast, it&amp;rsquo;s essential to understand&#xA;memory. Specifically, how data &lt;em&gt;is stored&lt;/em&gt; in memory and how it &lt;em&gt;is fed&lt;/em&gt; to&#xA;the processor, which performs the computations. All BLAS does is optimize these two&#xA;operations for a specific computer architecture. CORAL, for instance, targets AArch64 architectures.&lt;/p&gt;&#xA;&lt;p&gt;Future posts on BLAS will refer back to concepts explained here.&lt;/p&gt;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;&lt;p&gt;The content in this post is &lt;em&gt;&lt;strong&gt;heavily&lt;/strong&gt;&lt;/em&gt; taken from &lt;a href=&#34;https://people.freebsd.org/~lstewart/articles/cpumemory.pdf&#34;&gt;&lt;em&gt;What Every Programmer&#xA;Should Know About&#xA;Memory&lt;/em&gt;&lt;/a&gt; by Ulrich Drepper.&#xA;It&amp;rsquo;s phenomenal. Unless otherwise linked, all numerical values come from this paper.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is CORAL?</title>
      <link>http://localhost:1313/posts/coral_intro/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/coral_intro/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;http://localhost:1313/katex/katex.min.css&#34; /&gt;&lt;script defer src=&#34;http://localhost:1313/katex/katex.min.js&#34;&gt;&lt;/script&gt;&lt;script defer src=&#34;http://localhost:1313/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body, {&amp;#34;delimiters&amp;#34;:[{&amp;#34;left&amp;#34;:&amp;#34;$$&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;$$&amp;#34;,&amp;#34;display&amp;#34;:true},{&amp;#34;left&amp;#34;:&amp;#34;$&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;$&amp;#34;,&amp;#34;display&amp;#34;:false},{&amp;#34;left&amp;#34;:&amp;#34;\\(&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;\\)&amp;#34;,&amp;#34;display&amp;#34;:false},{&amp;#34;left&amp;#34;:&amp;#34;\\[&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;\\]&amp;#34;,&amp;#34;display&amp;#34;:true}]});&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;In the past few months I&amp;rsquo;ve become immensely interested in scientific computing&#xA;and writing fast code. I started &lt;a href=&#34;https://github.com/devdeliw/CORAL&#34;&gt;CORAL&lt;/a&gt; as a project to learn both at the same&#xA;time. And learn &lt;a href=&#34;https://rust-lang.org&#34;&gt;Rust&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;CORAL stands for &lt;em&gt;COre Rust Architecture for Linear algebra&lt;/em&gt;. It is an&#xA;implementation of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms&#34;&gt;Basic Linear Algebra&#xA;Subprograms&lt;/a&gt;, or&#xA;&lt;em&gt;BLAS&lt;/em&gt;, in pure Rust. It is written for AArch64 architectures only.&lt;/p&gt;&#xA;&lt;p&gt;BLAS is the set of the most common low-level operations, &amp;ldquo;kernels&amp;rdquo;, for linear&#xA;algebra. Most numerical routines involve linear algebra; it is clear&#xA;that a useful BLAS must be &lt;em&gt;as fast as possible&lt;/em&gt;. These kernels naturally separate&#xA;into three levels, each monumentally more difficult than the last.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hamiltonian Programming</title>
      <link>http://localhost:1313/posts/nasa_programming/</link>
      <pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/nasa_programming/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;http://localhost:1313/katex/katex.min.css&#34; /&gt;&lt;script defer src=&#34;http://localhost:1313/katex/katex.min.js&#34;&gt;&lt;/script&gt;&lt;script defer src=&#34;http://localhost:1313/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body, {&amp;#34;delimiters&amp;#34;:[{&amp;#34;left&amp;#34;:&amp;#34;$$&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;$$&amp;#34;,&amp;#34;display&amp;#34;:true},{&amp;#34;left&amp;#34;:&amp;#34;$&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;$&amp;#34;,&amp;#34;display&amp;#34;:false},{&amp;#34;left&amp;#34;:&amp;#34;\\(&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;\\)&amp;#34;,&amp;#34;display&amp;#34;:false},{&amp;#34;left&amp;#34;:&amp;#34;\\[&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;\\]&amp;#34;,&amp;#34;display&amp;#34;:true}]});&#34;&gt;&lt;/script&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;This is a long post. On mobile some equations may go overfull.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The goal of this post is to elegantly program the &lt;em&gt;Spin Hamiltonian&lt;/em&gt; governing&#xA;recombination in Silicon Carbide. Our system involves two electrons and two nuclei.&lt;/p&gt;&#xA;&lt;p&gt;We define our orthonormal basis as follows:&lt;/p&gt;&#xA;&lt;p&gt;The ${\uparrow, \downarrow}$ spin basis is called the Zeeman basis.&#xA;I define the basis with the two electrons coupled and the nuclei&#xA;in the Zeeman Basis as the &lt;em&gt;coupled basis&lt;/em&gt;.  Every state in our two-electron +&#xA;two-nuclei system is given by&lt;/p&gt;</description>
    </item>
    <item>
      <title>My project at NASA</title>
      <link>http://localhost:1313/posts/nasa_intro/</link>
      <pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/nasa_intro/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;http://localhost:1313/katex/katex.min.css&#34; /&gt;&lt;script defer src=&#34;http://localhost:1313/katex/katex.min.js&#34;&gt;&lt;/script&gt;&lt;script defer src=&#34;http://localhost:1313/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body, {&amp;#34;delimiters&amp;#34;:[{&amp;#34;left&amp;#34;:&amp;#34;$$&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;$$&amp;#34;,&amp;#34;display&amp;#34;:true},{&amp;#34;left&amp;#34;:&amp;#34;$&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;$&amp;#34;,&amp;#34;display&amp;#34;:false},{&amp;#34;left&amp;#34;:&amp;#34;\\(&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;\\)&amp;#34;,&amp;#34;display&amp;#34;:false},{&amp;#34;left&amp;#34;:&amp;#34;\\[&amp;#34;,&amp;#34;right&amp;#34;:&amp;#34;\\]&amp;#34;,&amp;#34;display&amp;#34;:true}]});&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;My work revolves around &lt;em&gt;Electrically Detected Magnetic Resonance&lt;/em&gt;&#xA;(&lt;a href=&#34;https://en.wikipedia.org/wiki/Electrically_detected_magnetic_resonance&#34;&gt;EDMR&lt;/a&gt;). It&amp;rsquo;s&#xA;a method to detect small magnetic fields electrically. In principle it&amp;rsquo;s very&#xA;simple.&lt;/p&gt;&#xA;&lt;p&gt;Say we have a semiconductor, like silicon carbide. This semiconductor, made by&#xA;nature or in a lab, is never perfect. There may exist some missing atoms, or extra&#xA;atoms, deep in its molecular structure. These &lt;em&gt;defects&lt;/em&gt; provide some extra&#xA;electrons, or extra holes, which can be used for quantum sensing. In EDMR, they&#xA;are used to measure magnetic fields electrically. I&amp;rsquo;ll now walk through how this&#xA;is done in silicon carbide (4H-SiC) specifically.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
